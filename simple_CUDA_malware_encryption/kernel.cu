/**
Author: Kostas Papagiannopoulos
Date: Started @ May 2012, Ended @ ....
Purpose: Proof of concept GPU-assisted malware implementation
Details: <tbu>
*/
#include "cuda_runtime.h"
#include "device_launch_parameters.h"


#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 255

cudaError_t encryptWithCUDA(int *c, const int *a, size_t size);

/** Here we apply the stream cipher. Nice side-effect: Ceasar cipher is fully parallelizable */
__global__ void unpackingEncryptionKernel(int *c, const int *a)
{
    int i = threadIdx.x;
	int temp;
    c[i] = a[i] + 13;
	if (c[i]>90){
		c[i]=c[i]-26;
	}
}

int main()
{
	
    const int arraySize = MAX_SIZE;
	/** This array a contains the malicious code that will be unpacked in the GPU */
    const int a[arraySize] = { 'B','O','N','Z','N','F','R','Y','S' };
    
	/** Array c contains the resulting, decrypted code */
    int c[arraySize] = { 0 };

    // Add vectors in parallel.
    cudaError_t cudaStatus = encryptWithCUDA(c, a, arraySize);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "encryptWithCuda failed!");
        return 1;
    }

    printf("We decrypt, i.e. we UNPACK with CUDA the array a:\n");
	int i;
	for (i=0;i<MAX_SIZE;i++){
		printf("%c ",a[i]);
	}
	printf("\n We get the 'malicious' code in array c:\n");
    for (i=0;i<MAX_SIZE;i++){
		printf("%c",c[i]);
	}    
	printf("\n");

	/** Now we could try to execute the decrypted command eg in commandline*/
	//GoGo System call with array c!

    // cudaDeviceReset must be called before exiting in order for profiling and
    // tracing tools such as Nsight and Visual Profiler to show complete traces.
    cudaStatus = cudaDeviceReset();
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaDeviceReset failed!");
        return 1;
    }
	system("PAUSE");
    return 0;
}

// Helper function for using CUDA to add vectors in parallel.
cudaError_t encryptWithCUDA(int *c, const int *a, size_t size)
{
    int *dev_a = 0;
    int *dev_c = 0;
    cudaError_t cudaStatus;

    // Choose which GPU to run on, change this on a multi-GPU system.
    cudaStatus = cudaSetDevice(0);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaSetDevice failed!  Do you have a CUDA-capable GPU installed?");
        goto Error;
    }

    // Allocate GPU buffers for three vectors (two input, one output)    .
    cudaStatus = cudaMalloc((void**)&dev_c, size * sizeof(int));
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaMalloc failed!");
        goto Error;
    }

    cudaStatus = cudaMalloc((void**)&dev_a, size * sizeof(int));
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaMalloc failed!");
        goto Error;
    }

    // Copy input vectors from host memory to GPU buffers.
    cudaStatus = cudaMemcpy(dev_a, a, size * sizeof(int), cudaMemcpyHostToDevice);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaMemcpy failed!");
        goto Error;
    }

    // Launch a kernel on the GPU with one thread for each element.
    unpackingEncryptionKernel<<<1, size>>>(dev_c, dev_a);
    // cudaDeviceSynchronize waits for the kernel to finish, and returns
    // any errors encountered during the launch.
    cudaStatus = cudaDeviceSynchronize();
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaDeviceSynchronize returned error code %d after launching addKernel!\n", cudaStatus);
        goto Error;
    }

    // Copy output vector from GPU buffer to host memory.
    cudaStatus = cudaMemcpy(c, dev_c, size * sizeof(int), cudaMemcpyDeviceToHost);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaMemcpy failed!");
        goto Error;
    }

Error:
    cudaFree(dev_c);
    cudaFree(dev_a);
    
    return cudaStatus;
}
